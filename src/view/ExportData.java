package view;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import model.Chore;
//import model.Profile;
import model.ProfileData;
import view.HelperMethods;

// This class is responsible for storing output data to individual text files.
public class ExportData {

	// Fields.
	// An output stream is created for each text file to be generated by the
	// program.
	private FileOutputStream fos;

	// Entry, Key and Value variables are created to be used with ease, for the
	// iterator below.
	private Entry<Chore, ArrayList<String>> currentEntry;
	private Chore currentKey;
	private ArrayList<String> currentValue;

	// An iterator is declared.
	private Iterator<Entry<Chore, ArrayList<String>>> i;

	// Main method.
	public void exportChoresToTextFiles(ProfileData pd) {
		if (pd != null) {
			for (int x = 0; x < pd.getProfiles().size(); x++) {

				// The iterator is assigned and passed a HashMap's iterator method to allow for
				// use below in the while loop.
				i = pd.getChoresAllocation().returnIterator();

				// Tasks for Person:
				// Try-catch block surrounds code section due to a file required to be
				// generated.
				try {
					// String variable to store list of stores all together.
					String output = "";

					// New file object is created at a specific path.
					File file = new File(pd.getProfile(x).getFilePath());

					// The File Output Stream will write to the file specified in the location
					// above.
					fos = new FileOutputStream(file);

					// The following Strings are retrieved from the model and all converted into
					// arrays of bytes.
					byte b[] = pd.getProfile(x).getCurrentDateLine().getBytes();
					byte b1[] = pd.getProfile(x).getWCDateLine().getBytes();
					byte b2[] = pd.getProfile(x).getTitle().getBytes();
					byte b3[] = pd.getProfile(x).getSeperator().getBytes();

					// The converted Strings are written to the file.
					fos.write(b);
					fos.write(b1);
					fos.write(b2);
					fos.write(b3);

					// Stores index position used for retrieving a Chore from the ChoresList.
					int index = 0;

					// This while loop retrieves all the chores required to be done by a person and
					// stores it together in the 'output' String.
					while (i.hasNext()) {
						currentEntry = (Map.Entry<Chore, ArrayList<String>>) i.next();
						currentKey = currentEntry.getKey();
						currentValue = currentEntry.getValue();

						if (currentValue.get(HelperMethods.getWeekSelector()).substring(3)
								.contains(pd.getProfile(x).getPerson().getFirstName())) {
							pd.getProfile(x).addChore(new Chore(currentKey.getChoreName(), currentKey.getChoreTime()));
							output = output + "  - " + pd.getProfile(x).getAllChores().getChore(index).getChoreName()
									+ "\r\n";
							index++;
						} else {
							output = output + "";
						}
					}

					// Stores total count of chores to profile.
					pd.getProfile(x).countChores(pd.getProfile(x).getAllChores().choresListSize());

					// The 'output' String is trimmed at the end and added to non-trimmed part of
					// itself to ensure that no newline is generated redundantly at the end of the
					// file.

					if (!output.isEmpty()) {
						String trimmed = output.substring(4).trim();
						output = output.substring(0, 4) + trimmed;
					}

					// The 'output' String is converted into an array of bytes, and it is then
					// written to the file.
					byte b0[] = output.getBytes();
					fos.write(b0);

					// The 'totalString' String is converted into an array of bytes, and it is then
					// written to the file.
					byte t[] = pd.getProfile(x).getTotalLine().getBytes();
					fos.write(t);

					// The Total time line is converted into an array of bytes, and it is then
					// written to the file.
					byte t2[] = (pd.getProfile(x).getTotalChoreTimeOutput()).getBytes();
					fos.write(t2);

					// The Average time line is converted into an array of bytes, and it is then
					// written to the file.
					byte t3[] = (pd.getProfile(x).getAverageChoreTimeOutput()).getBytes();
					fos.write(t3);

					fos.close(); // Output Stream is closed.

				} catch (FileNotFoundException e) { // Handles non-existent file name.
					e.printStackTrace();
				} catch (IOException e) { // Handles incorrect inputs/outputs.
					e.printStackTrace();
				}
			}
		}
	}
}
